// Generated by CoffeeScript 2.3.0
(function() {
  var FileHandler, fs, glob, util;

  fs = require("fs");

  util = require("util");

  glob = util.promisify(require("glob"));

  FileHandler = require("./FileHandler").FileHandler;

  describe("FileHandler", function() {
    var prefix, testedHandler;
    prefix = "/tmp/aono-file-handler/test.log";
    testedHandler = null;
    beforeEach(function() {
      return glob(`${prefix}*`).then(function(files) {
        return files.forEach(function(file) {
          return fs.unlinkSync(file);
        });
      });
    });
    describe("after creation", function() {
      beforeEach(function() {
        return testedHandler = new FileHandler(prefix);
      });
      it("contains passed parameters", function() {
        return testedHandler.prefix.should.equal(prefix);
      });
      it("contains default rotation threshold", function() {
        return testedHandler.rotationBytesThreshold.should.equal(104857600);
      });
      it("contains null currentFile", function() {
        return (should(testedHandler.currentFile)).equal(null);
      });
      it("contains zeroed currentFileSize", function() {
        return (should(testedHandler.currentFileSize)).equal(null);
      });
      it("contains zero bytesWritten", function() {
        return testedHandler.bytesWritten.should.equal(0);
      });
      describe("when after handling log entry without meta", function() {
        var entry;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {}
        };
        beforeEach(function() {
          return testedHandler.handle([entry]);
        });
        it("contains properly set currentFile", function() {
          return testedHandler.currentFile.should.equal(`${prefix}.1970-01-01_00:00:00.000`);
        });
        it("contains properly set currentFileSize", function() {
          return testedHandler.currentFileSize.should.equal(106);
        });
        it("contains properly set bytesWritten", function() {
          return testedHandler.bytesWritten.should.equal(106);
        });
        return it("wrote log entry to a log file", function() {
          var contents;
          contents = fs.readFileSync(testedHandler.currentFile).toString("utf-8");
          return contents.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!"' + ' }\n');
        });
      });
      return describe("when after handling log entry with meta", function() {
        var entry;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {
            number: 1
          }
        };
        beforeEach(function() {
          return testedHandler.handle([entry]);
        });
        it("contains properly set currentFile", function() {
          return testedHandler.currentFile.should.equal(`${prefix}.1970-01-01_00:00:00.000`);
        });
        it("contains properly set currentFileSize", function() {
          return testedHandler.currentFileSize.should.equal(121);
        });
        it("contains properly set bytesWritten", function() {
          return testedHandler.bytesWritten.should.equal(121);
        });
        return it("wrote log entry to a log file", function() {
          var contents;
          contents = fs.readFileSync(testedHandler.currentFile).toString("utf-8");
          return contents.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!", ' + '"Â»number": 1' + ' }\n');
        });
      });
    });
    return describe("after creation with small rotation threshold", function() {
      var smallThreshold;
      smallThreshold = 16;
      beforeEach(function() {
        return testedHandler = new FileHandler(prefix, smallThreshold);
      });
      it("contains properly set rotation threshold", function() {
        return testedHandler.rotationBytesThreshold.should.equal(smallThreshold);
      });
      return describe("when after handling first log entry", function() {
        var entry0;
        entry0 = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {}
        };
        beforeEach(function() {
          return testedHandler.handle([entry0]);
        });
        it("contains null currentFile", function() {
          return (should(testedHandler.currentFile)).equal(null);
        });
        it("contains zeroed currentFileSize", function() {
          return (should(testedHandler.currentFileSize)).equal(null);
        });
        return describe("and after adding second log entry", function() {
          var entry1;
          entry1 = {
            timestamp: 1,
            logger: "test",
            level: "bad",
            message: "it's you again",
            meta: {}
          };
          beforeEach(function() {
            return testedHandler.handle([entry1]);
          });
          it("contains null currentFile", function() {
            return (should(testedHandler.currentFile)).equal(null);
          });
          it("contains zeroed currentFileSize", function() {
            return (should(testedHandler.currentFileSize)).equal(null);
          });
          it("contains properly set bytesWritten", function() {
            return testedHandler.bytesWritten.should.equal(213);
          });
          it("wrote first log entry to first file", function() {
            var contents;
            contents = fs.readFileSync(`${prefix}.1970-01-01_00:00:00.000`).toString("utf-8");
            return contents.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!"' + ' }\n');
          });
          return it("wrote second log entry to second file", function() {
            var contents;
            contents = fs.readFileSync(`${prefix}.1970-01-01_00:00:00.001`).toString("utf-8");
            return contents.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.001Z", ' + '"logger": "test", ' + '"level": "bad", ' + '"message": "it\'s you again"' + ' }\n');
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=FileHandler.spec.js.map
