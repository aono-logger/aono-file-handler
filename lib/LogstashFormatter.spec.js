// Generated by CoffeeScript 2.3.0
(function() {
  var LogstashFormatter;

  LogstashFormatter = require("./LogstashFormatter").LogstashFormatter;

  describe("LogstashFormatter", function() {
    var testedFormatter;
    testedFormatter = null;
    describe("when created without any consts", function() {
      beforeEach(function() {
        return testedFormatter = new LogstashFormatter;
      });
      it("contains no consts", function() {
        return testedFormatter.consts.should.eql({});
      });
      it("formats an entry without meta", function() {
        var entry, formatted;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {}
        };
        formatted = testedFormatter.format(entry);
        return formatted.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!"' + ' }\n');
      });
      it("formats an entry with meta", function() {
        var entry, formatted;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {
            number: 1
          }
        };
        formatted = testedFormatter.format(entry);
        return formatted.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!", ' + '"»number": 1' + ' }\n');
      });
      it("formats an entry with Error in meta", function() {
        var entry, formatted;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {
            error: new Error
          }
        };
        entry.meta.error.stack = "a\na\na";
        formatted = testedFormatter.format(entry);
        return formatted.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!", ' + '"»error": ["a","a","a"]' + ' }\n');
      });
      return it("formats an entry containing utf character", function() {
        var entry, formatted;
        entry = {
          timestamp: 10,
          logger: "test",
          level: "good",
          message: "☃",
          meta: {}
        };
        formatted = testedFormatter.format(entry);
        return formatted.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.010Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "☃"' + ' }\n');
      });
    });
    return describe("when created with some consts", function() {
      var consts;
      consts = {
        author: "Maciej"
      };
      beforeEach(function() {
        return testedFormatter = new LogstashFormatter(consts);
      });
      it("contains proper consts", function() {
        return testedFormatter.consts.should.eql(consts);
      });
      it("formats an entry without meta", function() {
        var entry, formatted;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {}
        };
        formatted = testedFormatter.format(entry);
        return formatted.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!", ' + '"author": "Maciej"' + ' }\n');
      });
      return it("formats an entry with meta", function() {
        var entry, formatted;
        entry = {
          timestamp: 0,
          logger: "test",
          level: "good",
          message: "hello, file!",
          meta: {
            number: 1
          }
        };
        formatted = testedFormatter.format(entry);
        return formatted.should.equal('{ ' + '"timestamp": "1970-01-01T00:00:00.000Z", ' + '"logger": "test", ' + '"level": "good", ' + '"message": "hello, file!", ' + '"author": "Maciej", ' + '"»number": 1' + ' }\n');
      });
    });
  });

}).call(this);

//# sourceMappingURL=LogstashFormatter.spec.js.map
