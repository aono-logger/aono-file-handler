{
  "version": 3,
  "file": "LogstashFormatter.spec.js",
  "sourceRoot": "..",
  "sources": [
    "src/LogstashFormatter.spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nLogstashFormatter = require \"./LogstashFormatter\"\n  .LogstashFormatter\n\ndescribe \"LogstashFormatter\", ->\n  testedFormatter = null\n\n  describe \"when created without any consts\", ->\n    beforeEach ->\n      testedFormatter = new LogstashFormatter\n\n    it \"contains no consts\", ->\n      testedFormatter.consts.should.eql {}\n\n    it \"formats an entry without meta\", ->\n      entry =\n        timestamp: 0\n        logger: \"test\"\n        level: \"good\"\n        message: \"hello, file!\"\n        meta: {}\n\n      formatted = testedFormatter.format entry\n\n      formatted.should.equal '{ '+\n        '\"timestamp\": \"1970-01-01T00:00:00.000Z\", '+\n        '\"logger\": \"test\", '+\n        '\"level\": \"good\", '+\n        '\"message\": \"hello, file!\"'+\n      ' }\\n'\n\n    it \"formats an entry with meta\", ->\n      entry =\n        timestamp: 0\n        logger: \"test\"\n        level: \"good\"\n        message: \"hello, file!\"\n        meta:\n          number: 1\n\n      formatted = testedFormatter.format entry\n\n      formatted.should.equal '{ '+\n        '\"timestamp\": \"1970-01-01T00:00:00.000Z\", '+\n        '\"logger\": \"test\", '+\n        '\"level\": \"good\", '+\n        '\"message\": \"hello, file!\", '+\n        '\"&#187;number\": 1'+\n      ' }\\n'\n\n    it \"formats an entry with Error in meta\", ->\n      entry =\n        timestamp: 0\n        logger: \"test\"\n        level: \"good\"\n        message: \"hello, file!\"\n        meta:\n          error: new Error\n      entry.meta.error.stack = \"a\\na\\na\"\n\n      formatted = testedFormatter.format entry\n\n      formatted.should.equal '{ '+\n        '\"timestamp\": \"1970-01-01T00:00:00.000Z\", '+\n        '\"logger\": \"test\", '+\n        '\"level\": \"good\", '+\n        '\"message\": \"hello, file!\", '+\n        '\"&#187;error\": [\"a\",\"a\",\"a\"]'+\n      ' }\\n'\n\n    it \"formats an entry containing utf character\", ->\n      entry =\n        timestamp: 10\n        logger: \"test\"\n        level: \"good\"\n        message: \"â˜ƒ\"\n        meta: {}\n\n      formatted = testedFormatter.format entry\n\n      formatted.should.equal '{ '+\n        '\"timestamp\": \"1970-01-01T00:00:00.010Z\", '+\n        '\"logger\": \"test\", '+\n        '\"level\": \"good\", '+\n        '\"message\": \"&#9731;\"'+\n      ' }\\n'\n\n  describe \"when created with some consts\", ->\n    consts = author: \"Maciej\"\n\n    beforeEach ->\n      testedFormatter = new LogstashFormatter consts\n\n    it \"contains proper consts\", ->\n      testedFormatter.consts.should.eql consts\n\n    it \"formats an entry without meta\", ->\n      entry =\n        timestamp: 0\n        logger: \"test\"\n        level: \"good\"\n        message: \"hello, file!\"\n        meta: {}\n\n      formatted = testedFormatter.format entry\n\n      formatted.should.equal '{ '+\n        '\"timestamp\": \"1970-01-01T00:00:00.000Z\", '+\n        '\"logger\": \"test\", '+\n        '\"level\": \"good\", '+\n        '\"message\": \"hello, file!\", '+\n        '\"author\": \"Maciej\"'+\n      ' }\\n'\n\n    it \"formats an entry with meta\", ->\n      entry =\n        timestamp: 0\n        logger: \"test\"\n        level: \"good\"\n        message: \"hello, file!\"\n        meta:\n          number: 1\n\n      formatted = testedFormatter.format entry\n\n      formatted.should.equal '{ '+\n        '\"timestamp\": \"1970-01-01T00:00:00.000Z\", '+\n        '\"logger\": \"test\", '+\n        '\"level\": \"good\", '+\n        '\"message\": \"hello, file!\", '+\n        '\"author\": \"Maciej\", '+\n        '\"&#187;number\": 1'+\n      ' }\\n'\n\n"
  ]
}